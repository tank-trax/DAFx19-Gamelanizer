diff --git a/Plug-in/Source/GamelanizerParametersVTSHelper.h b/Plug-in/Source/GamelanizerParametersVTSHelper.h
index ad67679..07fb8c5 100644
--- a/Plug-in/Source/GamelanizerParametersVTSHelper.h
+++ b/Plug-in/Source/GamelanizerParametersVTSHelper.h
@@ -94,19 +94,19 @@ private:
     //==============================================================================
     typedef SmoothedValue<float, ValueSmoothingTypes::Linear> SmoothFloat;
 
-    std::array<float*, GamelanizerConstants::maxLevels + 1> gainParamRawPointers{};
+    std::array<std::atomic<float>*, GamelanizerConstants::maxLevels + 1> gainParamRawPointers{};
     std::array<SmoothFloat, GamelanizerConstants::maxLevels + 1> gainsSmooth{};
 
-    std::array<float*, GamelanizerConstants::maxLevels + 1> panParamRawPointers{};
+    std::array<std::atomic<float>*, GamelanizerConstants::maxLevels + 1> panParamRawPointers{};
     std::array<SmoothFloat, GamelanizerConstants::maxLevels + 1> pansSmooth{};
 
-    std::array<float*, GamelanizerConstants::maxLevels + 1> muteParamRawPointers{};
+    std::array<std::atomic<float>*, GamelanizerConstants::maxLevels + 1> muteParamRawPointers{};
     std::array<SmoothFloat, GamelanizerConstants::maxLevels + 1> mutesSmooth{};
 
-    std::array<float*, GamelanizerConstants::maxLevels> taperParamRawPointers{};
+    std::array<std::atomic<float>*, GamelanizerConstants::maxLevels> taperParamRawPointers{};
     std::array<SmoothFloat, GamelanizerConstants::maxLevels> tapersSmooth{};
 
-    std::array<float*, GamelanizerConstants::maxLevels> pitchParamRawPointers{};
+    std::array<std::atomic<float>*, GamelanizerConstants::maxLevels> pitchParamRawPointers{};
     std::array<SmoothFloat, GamelanizerConstants::maxLevels> pitchesSmooth{};
     std::array<float, GamelanizerConstants::maxLevels> pitchesPrevious{};
     //==============================================================================
@@ -116,17 +116,17 @@ private:
      */
     static constexpr int filterUpdateRateInSamples{32};
 
-    std::array<float*, GamelanizerConstants::maxLevels> lpfParamRawPointers{};
+    std::array<std::atomic<float>*, GamelanizerConstants::maxLevels> lpfParamRawPointers{};
     std::array<SmoothFloat, GamelanizerConstants::maxLevels> lpfSmooth{};
     std::array<float, GamelanizerConstants::maxLevels> lpfPrevious{};
     std::array<int, GamelanizerConstants::maxLevels> lpfSamplesSinceChange{};
 
-    std::array<float*, GamelanizerConstants::maxLevels> hpfParamRawPointers{};
+    std::array<std::atomic<float>*, GamelanizerConstants::maxLevels> hpfParamRawPointers{};
     std::array<SmoothFloat, GamelanizerConstants::maxLevels> hpfSmooth{};
     std::array<float, GamelanizerConstants::maxLevels> hpfPrevious{};
     std::array<int, GamelanizerConstants::maxLevels> hpfSamplesSinceChange{};
     //==============================================================================
-    std::array<std::array<float*, 4>, GamelanizerConstants::maxLevels> dropParamRawPointers{};
+    std::array<std::array<std::atomic<float>*, 4>, GamelanizerConstants::maxLevels> dropParamRawPointers{};
     //==============================================================================
     JUCE_LEAK_DETECTOR(GamelanizerParametersVtsHelper)
 };
diff --git a/Plug-in/Source/ModuloSameSignAsDivisor.cpp b/Plug-in/Source/ModuloSameSignAsDivisor.cpp
index 6c8846e..a148b00 100644
--- a/Plug-in/Source/ModuloSameSignAsDivisor.cpp
+++ b/Plug-in/Source/ModuloSameSignAsDivisor.cpp
@@ -25,7 +25,7 @@
 
 float ModuloSameSignAsDivisor::mod(const float x, const float y)
 {
-    const auto a = std::fmod(x, y);
+    const auto a = fmodf(x, y);
     const auto b = a + y;
-    return std::fmod(b, y);
+    return fmodf(b, y);
 }
diff --git a/Plug-in/Source/PluginEditor.cpp b/Plug-in/Source/PluginEditor.cpp
index 0260884..cf644e4 100644
--- a/Plug-in/Source/PluginEditor.cpp
+++ b/Plug-in/Source/PluginEditor.cpp
@@ -44,7 +44,7 @@ GamelanizerAudioProcessorEditor::GamelanizerAudioProcessorEditor(GamelanizerAudi
     // TODO Async?
     aboutButton.onClick = [this]
     {
-        AlertWindow::showMessageBox(AlertWindow::QuestionIcon, "About",
+        AlertWindow::showMessageBoxAsync(AlertWindow::QuestionIcon, "About",
                                     "Gamelanizer " + String(JucePlugin_VersionString) +
                                     ", made by Luke M. Craig for DAFx19.\n"
                                     + "Code repo available at\n"
diff --git a/Plug-in/Source/PluginProcessor.cpp b/Plug-in/Source/PluginProcessor.cpp
index 2f00441..9e3610f 100644
--- a/Plug-in/Source/PluginProcessor.cpp
+++ b/Plug-in/Source/PluginProcessor.cpp
@@ -225,8 +225,8 @@ void GamelanizerAudioProcessor::processBlock(AudioBuffer<float>& buffer, MidiBuf
 }
 
 void GamelanizerAudioProcessor::processSamples(const int64 numSamples, const float* monoInputRead,
-                                               float** multiOutWrite, float* baseDelayBufferReadWrite,
-                                               float** levelsBufferReadWrite, const bool skipProcessing)
+                                               float* const* multiOutWrite, float* baseDelayBufferReadWrite,
+                                               float* const* levelsBufferReadWrite, const bool skipProcessing)
 {
 #if MeasurePerformance
     const auto startingTime = PerformanceMeasures::getNewStartingTime();
diff --git a/Plug-in/Source/PluginProcessor.h b/Plug-in/Source/PluginProcessor.h
index c8075a6..084630e 100644
--- a/Plug-in/Source/PluginProcessor.h
+++ b/Plug-in/Source/PluginProcessor.h
@@ -258,8 +258,8 @@ private:
      * \param levelsBufferReadWrite Write pointers to #SubdivisionLevelsOutputBuffer::data
      * \param skipProcessing If true, skip intense processing in order to get the buffer position states correct
      */
-    void processSamples(int64 numSamples, const float* monoInputRead, float** multiOutWrite,
-                        float* baseDelayBufferReadWrite, float** levelsBufferReadWrite, bool skipProcessing);
+    void processSamples(int64 numSamples, const float* monoInputRead, float* const* multiOutWrite,
+                        float* baseDelayBufferReadWrite, float* const* levelsBufferReadWrite, bool skipProcessing);
 
     //==============================================================================
     /**
